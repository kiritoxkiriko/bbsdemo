package com.wxm.bbsdemo.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class BannedExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table banned
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table banned
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table banned
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public BannedExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table banned
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table banned
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andBannedidIsNull() {
            addCriterion("bannedid is null");
            return (Criteria) this;
        }

        public Criteria andBannedidIsNotNull() {
            addCriterion("bannedid is not null");
            return (Criteria) this;
        }

        public Criteria andBannedidEqualTo(Long value) {
            addCriterion("bannedid =", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidNotEqualTo(Long value) {
            addCriterion("bannedid <>", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidGreaterThan(Long value) {
            addCriterion("bannedid >", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidGreaterThanOrEqualTo(Long value) {
            addCriterion("bannedid >=", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidLessThan(Long value) {
            addCriterion("bannedid <", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidLessThanOrEqualTo(Long value) {
            addCriterion("bannedid <=", value, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidIn(List<Long> values) {
            addCriterion("bannedid in", values, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidNotIn(List<Long> values) {
            addCriterion("bannedid not in", values, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidBetween(Long value1, Long value2) {
            addCriterion("bannedid between", value1, value2, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBannedidNotBetween(Long value1, Long value2) {
            addCriterion("bannedid not between", value1, value2, "bannedid");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdIsNull() {
            addCriterion("banneduser_id is null");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdIsNotNull() {
            addCriterion("banneduser_id is not null");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdEqualTo(Long value) {
            addCriterion("banneduser_id =", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdNotEqualTo(Long value) {
            addCriterion("banneduser_id <>", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdGreaterThan(Long value) {
            addCriterion("banneduser_id >", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdGreaterThanOrEqualTo(Long value) {
            addCriterion("banneduser_id >=", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdLessThan(Long value) {
            addCriterion("banneduser_id <", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdLessThanOrEqualTo(Long value) {
            addCriterion("banneduser_id <=", value, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdIn(List<Long> values) {
            addCriterion("banneduser_id in", values, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdNotIn(List<Long> values) {
            addCriterion("banneduser_id not in", values, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdBetween(Long value1, Long value2) {
            addCriterion("banneduser_id between", value1, value2, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBanneduserIdNotBetween(Long value1, Long value2) {
            addCriterion("banneduser_id not between", value1, value2, "banneduserId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdIsNull() {
            addCriterion("bannedbord_id is null");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdIsNotNull() {
            addCriterion("bannedbord_id is not null");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdEqualTo(Long value) {
            addCriterion("bannedbord_id =", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdNotEqualTo(Long value) {
            addCriterion("bannedbord_id <>", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdGreaterThan(Long value) {
            addCriterion("bannedbord_id >", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdGreaterThanOrEqualTo(Long value) {
            addCriterion("bannedbord_id >=", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdLessThan(Long value) {
            addCriterion("bannedbord_id <", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdLessThanOrEqualTo(Long value) {
            addCriterion("bannedbord_id <=", value, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdIn(List<Long> values) {
            addCriterion("bannedbord_id in", values, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdNotIn(List<Long> values) {
            addCriterion("bannedbord_id not in", values, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdBetween(Long value1, Long value2) {
            addCriterion("bannedbord_id between", value1, value2, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andBannedbordIdNotBetween(Long value1, Long value2) {
            addCriterion("bannedbord_id not between", value1, value2, "bannedbordId");
            return (Criteria) this;
        }

        public Criteria andTimeIsNull() {
            addCriterion("time is null");
            return (Criteria) this;
        }

        public Criteria andTimeIsNotNull() {
            addCriterion("time is not null");
            return (Criteria) this;
        }

        public Criteria andTimeEqualTo(Long value) {
            addCriterion("time =", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotEqualTo(Long value) {
            addCriterion("time <>", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThan(Long value) {
            addCriterion("time >", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("time >=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThan(Long value) {
            addCriterion("time <", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeLessThanOrEqualTo(Long value) {
            addCriterion("time <=", value, "time");
            return (Criteria) this;
        }

        public Criteria andTimeIn(List<Long> values) {
            addCriterion("time in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotIn(List<Long> values) {
            addCriterion("time not in", values, "time");
            return (Criteria) this;
        }

        public Criteria andTimeBetween(Long value1, Long value2) {
            addCriterion("time between", value1, value2, "time");
            return (Criteria) this;
        }

        public Criteria andTimeNotBetween(Long value1, Long value2) {
            addCriterion("time not between", value1, value2, "time");
            return (Criteria) this;
        }

        public Criteria andStarttimeIsNull() {
            addCriterion("starttime is null");
            return (Criteria) this;
        }

        public Criteria andStarttimeIsNotNull() {
            addCriterion("starttime is not null");
            return (Criteria) this;
        }

        public Criteria andStarttimeEqualTo(Date value) {
            addCriterionForJDBCDate("starttime =", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("starttime <>", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeGreaterThan(Date value) {
            addCriterionForJDBCDate("starttime >", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("starttime >=", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeLessThan(Date value) {
            addCriterionForJDBCDate("starttime <", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("starttime <=", value, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeIn(List<Date> values) {
            addCriterionForJDBCDate("starttime in", values, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("starttime not in", values, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("starttime between", value1, value2, "starttime");
            return (Criteria) this;
        }

        public Criteria andStarttimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("starttime not between", value1, value2, "starttime");
            return (Criteria) this;
        }

        public Criteria andEndtimeIsNull() {
            addCriterion("endtime is null");
            return (Criteria) this;
        }

        public Criteria andEndtimeIsNotNull() {
            addCriterion("endtime is not null");
            return (Criteria) this;
        }

        public Criteria andEndtimeEqualTo(Date value) {
            addCriterion("endtime =", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeNotEqualTo(Date value) {
            addCriterion("endtime <>", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeGreaterThan(Date value) {
            addCriterion("endtime >", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeGreaterThanOrEqualTo(Date value) {
            addCriterion("endtime >=", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeLessThan(Date value) {
            addCriterion("endtime <", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeLessThanOrEqualTo(Date value) {
            addCriterion("endtime <=", value, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeIn(List<Date> values) {
            addCriterion("endtime in", values, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeNotIn(List<Date> values) {
            addCriterion("endtime not in", values, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeBetween(Date value1, Date value2) {
            addCriterion("endtime between", value1, value2, "endtime");
            return (Criteria) this;
        }

        public Criteria andEndtimeNotBetween(Date value1, Date value2) {
            addCriterion("endtime not between", value1, value2, "endtime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table banned
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table banned
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}